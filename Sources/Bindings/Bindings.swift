// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(BindingsFFI)
    import BindingsFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_bindings_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_bindings_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        throw CancellationError()

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterInt16: FfiConverterPrimitive {
    typealias FfiType = Int16
    typealias SwiftType = Int16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int16, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterInt32: FfiConverterPrimitive {
    typealias FfiType = Int32
    typealias SwiftType = Int32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int32, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

private struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return try Data(readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

public struct IdAddrPair {
    public var id: UInt64
    public var addr: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: UInt64, addr: String) {
        self.id = id
        self.addr = addr
    }
}

extension IdAddrPair: Equatable, Hashable {
    public static func == (lhs: IdAddrPair, rhs: IdAddrPair) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.addr != rhs.addr {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(addr)
    }
}

public struct FfiConverterTypeIDAddrPair: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IdAddrPair {
        return try IdAddrPair(
            id: FfiConverterUInt64.read(from: &buf),
            addr: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: IdAddrPair, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterString.write(value.addr, into: &buf)
    }
}

public func FfiConverterTypeIDAddrPair_lift(_ buf: RustBuffer) throws -> IdAddrPair {
    return try FfiConverterTypeIDAddrPair.lift(buf)
}

public func FfiConverterTypeIDAddrPair_lower(_ value: IdAddrPair) -> RustBuffer {
    return FfiConverterTypeIDAddrPair.lower(value)
}

public struct KcpConfigParams {
    public var mtu: Int16?
    public var nodelay: Bool?
    public var nodelayInterval: Int32?
    public var nodelayResend: Int32?
    public var nodelayNc: Bool?
    public var windowSizeSend: UInt16?
    public var windowSizeRecv: UInt16?
    public var sessionExpireMilisec: UInt32?
    public var flushWrite: Bool?
    public var flushAcksInput: Bool?
    public var stream: Bool?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(mtu: Int16?, nodelay: Bool?, nodelayInterval: Int32?, nodelayResend: Int32?, nodelayNc: Bool?, windowSizeSend: UInt16?, windowSizeRecv: UInt16?, sessionExpireMilisec: UInt32?, flushWrite: Bool?, flushAcksInput: Bool?, stream: Bool?) {
        self.mtu = mtu
        self.nodelay = nodelay
        self.nodelayInterval = nodelayInterval
        self.nodelayResend = nodelayResend
        self.nodelayNc = nodelayNc
        self.windowSizeSend = windowSizeSend
        self.windowSizeRecv = windowSizeRecv
        self.sessionExpireMilisec = sessionExpireMilisec
        self.flushWrite = flushWrite
        self.flushAcksInput = flushAcksInput
        self.stream = stream
    }
}

extension KcpConfigParams: Equatable, Hashable {
    public static func == (lhs: KcpConfigParams, rhs: KcpConfigParams) -> Bool {
        if lhs.mtu != rhs.mtu {
            return false
        }
        if lhs.nodelay != rhs.nodelay {
            return false
        }
        if lhs.nodelayInterval != rhs.nodelayInterval {
            return false
        }
        if lhs.nodelayResend != rhs.nodelayResend {
            return false
        }
        if lhs.nodelayNc != rhs.nodelayNc {
            return false
        }
        if lhs.windowSizeSend != rhs.windowSizeSend {
            return false
        }
        if lhs.windowSizeRecv != rhs.windowSizeRecv {
            return false
        }
        if lhs.sessionExpireMilisec != rhs.sessionExpireMilisec {
            return false
        }
        if lhs.flushWrite != rhs.flushWrite {
            return false
        }
        if lhs.flushAcksInput != rhs.flushAcksInput {
            return false
        }
        if lhs.stream != rhs.stream {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(mtu)
        hasher.combine(nodelay)
        hasher.combine(nodelayInterval)
        hasher.combine(nodelayResend)
        hasher.combine(nodelayNc)
        hasher.combine(windowSizeSend)
        hasher.combine(windowSizeRecv)
        hasher.combine(sessionExpireMilisec)
        hasher.combine(flushWrite)
        hasher.combine(flushAcksInput)
        hasher.combine(stream)
    }
}

public struct FfiConverterTypeKcpConfigParams: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KcpConfigParams {
        return try KcpConfigParams(
            mtu: FfiConverterOptionInt16.read(from: &buf),
            nodelay: FfiConverterOptionBool.read(from: &buf),
            nodelayInterval: FfiConverterOptionInt32.read(from: &buf),
            nodelayResend: FfiConverterOptionInt32.read(from: &buf),
            nodelayNc: FfiConverterOptionBool.read(from: &buf),
            windowSizeSend: FfiConverterOptionUInt16.read(from: &buf),
            windowSizeRecv: FfiConverterOptionUInt16.read(from: &buf),
            sessionExpireMilisec: FfiConverterOptionUInt32.read(from: &buf),
            flushWrite: FfiConverterOptionBool.read(from: &buf),
            flushAcksInput: FfiConverterOptionBool.read(from: &buf),
            stream: FfiConverterOptionBool.read(from: &buf)
        )
    }

    public static func write(_ value: KcpConfigParams, into buf: inout [UInt8]) {
        FfiConverterOptionInt16.write(value.mtu, into: &buf)
        FfiConverterOptionBool.write(value.nodelay, into: &buf)
        FfiConverterOptionInt32.write(value.nodelayInterval, into: &buf)
        FfiConverterOptionInt32.write(value.nodelayResend, into: &buf)
        FfiConverterOptionBool.write(value.nodelayNc, into: &buf)
        FfiConverterOptionUInt16.write(value.windowSizeSend, into: &buf)
        FfiConverterOptionUInt16.write(value.windowSizeRecv, into: &buf)
        FfiConverterOptionUInt32.write(value.sessionExpireMilisec, into: &buf)
        FfiConverterOptionBool.write(value.flushWrite, into: &buf)
        FfiConverterOptionBool.write(value.flushAcksInput, into: &buf)
        FfiConverterOptionBool.write(value.stream, into: &buf)
    }
}

public func FfiConverterTypeKcpConfigParams_lift(_ buf: RustBuffer) throws -> KcpConfigParams {
    return try FfiConverterTypeKcpConfigParams.lift(buf)
}

public func FfiConverterTypeKcpConfigParams_lower(_ value: KcpConfigParams) -> RustBuffer {
    return FfiConverterTypeKcpConfigParams.lower(value)
}

public enum SwiftKcpError {
    case Default(msg: String)
    case RuntimeNotInited
    case NoStreamForId(id: UInt64)
    case NoListenerForId(id: UInt64)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeSwiftKcpError.lift(error)
    }
}

public struct FfiConverterTypeSwiftKcpError: FfiConverterRustBuffer {
    typealias SwiftType = SwiftKcpError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftKcpError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .Default(
                msg: FfiConverterString.read(from: &buf)
            )
        case 2: return .RuntimeNotInited
        case 3: return try .NoStreamForId(
                id: FfiConverterUInt64.read(from: &buf)
            )
        case 4: return try .NoListenerForId(
                id: FfiConverterUInt64.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SwiftKcpError, into buf: inout [UInt8]) {
        switch value {
        case let .Default(msg):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(msg, into: &buf)

        case .RuntimeNotInited:
            writeInt(&buf, Int32(2))

        case let .NoStreamForId(id):
            writeInt(&buf, Int32(3))
            FfiConverterUInt64.write(id, into: &buf)

        case let .NoListenerForId(id):
            writeInt(&buf, Int32(4))
            FfiConverterUInt64.write(id, into: &buf)
        }
    }
}

extension SwiftKcpError: Equatable, Hashable {}

extension SwiftKcpError: Error {}

private struct FfiConverterOptionUInt16: FfiConverterRustBuffer {
    typealias SwiftType = UInt16?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt16.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt16.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionInt16: FfiConverterRustBuffer {
    typealias SwiftType = Int16?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterInt16.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterInt16.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionInt32: FfiConverterRustBuffer {
    typealias SwiftType = Int32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionBool: FfiConverterRustBuffer {
    typealias SwiftType = Bool?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterBool.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterBool.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

private func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UnsafeMutableRawPointer,
    pollFunc: (UnsafeMutableRawPointer, UnsafeMutableRawPointer) -> Void,
    completeFunc: (UnsafeMutableRawPointer, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UnsafeMutableRawPointer) -> Void,
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) async throws -> T {
    // Make sure to call uniffiEnsureInitialized() since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(rustFuture, ContinuationHolder($0).toOpaque())
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
private func uniffiFutureContinuationCallback(ptr: UnsafeMutableRawPointer, pollResult: Int8) {
    ContinuationHolder.fromOpaque(ptr).resume(pollResult)
}

// Wraps UnsafeContinuation in a class so that we can use reference counting when passing it across
// the FFI
private class ContinuationHolder {
    let continuation: UnsafeContinuation<Int8, Never>

    init(_ continuation: UnsafeContinuation<Int8, Never>) {
        self.continuation = continuation
    }

    func resume(_ pollResult: Int8) {
        continuation.resume(returning: pollResult)
    }

    func toOpaque() -> UnsafeMutableRawPointer {
        return Unmanaged<ContinuationHolder>.passRetained(self).toOpaque()
    }

    static func fromOpaque(_ ptr: UnsafeRawPointer) -> ContinuationHolder {
        return Unmanaged<ContinuationHolder>.fromOpaque(ptr).takeRetainedValue()
    }
}

private func uniffiInitContinuationCallback() {
    ffi_bindings_rust_future_continuation_callback_set(uniffiFutureContinuationCallback)
}

public func accepet(id: UInt64) async throws -> IdAddrPair {
    return try await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_bindings_fn_func_accepet(
                FfiConverterUInt64.lower(id)
            )
        },
        pollFunc: ffi_bindings_rust_future_poll_rust_buffer,
        completeFunc: ffi_bindings_rust_future_complete_rust_buffer,
        freeFunc: ffi_bindings_rust_future_free_rust_buffer,
        liftFunc: FfiConverterTypeIDAddrPair.lift,
        errorHandler: FfiConverterTypeSwiftKcpError.lift
    )
}

public func defaultKcpConfigParams() -> KcpConfigParams {
    return try! FfiConverterTypeKcpConfigParams.lift(
        try! rustCall {
            uniffi_bindings_fn_func_default_kcp_config_params($0)
        }
    )
}

public func deinitRuntime() async {
    return try! await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_bindings_fn_func_deinit_runtime(
            )
        },
        pollFunc: ffi_bindings_rust_future_poll_void,
        completeFunc: ffi_bindings_rust_future_complete_void,
        freeFunc: ffi_bindings_rust_future_free_void,
        liftFunc: { $0 },
        errorHandler: nil
    )
}

public func flushStream(id: UInt64) async throws {
    return try await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_bindings_fn_func_flush_stream(
                FfiConverterUInt64.lower(id)
            )
        },
        pollFunc: ffi_bindings_rust_future_poll_void,
        completeFunc: ffi_bindings_rust_future_complete_void,
        freeFunc: ffi_bindings_rust_future_free_void,
        liftFunc: { $0 },
        errorHandler: FfiConverterTypeSwiftKcpError.lift
    )
}

public func getStreamCount() async -> UInt32 {
    return try! await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_bindings_fn_func_get_stream_count(
            )
        },
        pollFunc: ffi_bindings_rust_future_poll_u32,
        completeFunc: ffi_bindings_rust_future_complete_u32,
        freeFunc: ffi_bindings_rust_future_free_u32,
        liftFunc: FfiConverterUInt32.lift,
        errorHandler: nil
    )
}

public func initRuntime() async throws {
    return try await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_bindings_fn_func_init_runtime(
            )
        },
        pollFunc: ffi_bindings_rust_future_poll_void,
        completeFunc: ffi_bindings_rust_future_complete_void,
        freeFunc: ffi_bindings_rust_future_free_void,
        liftFunc: { $0 },
        errorHandler: FfiConverterTypeSwiftKcpError.lift
    )
}

public func localAddr(id: UInt64) async throws -> String {
    return try await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_bindings_fn_func_local_addr(
                FfiConverterUInt64.lower(id)
            )
        },
        pollFunc: ffi_bindings_rust_future_poll_rust_buffer,
        completeFunc: ffi_bindings_rust_future_complete_rust_buffer,
        freeFunc: ffi_bindings_rust_future_free_rust_buffer,
        liftFunc: FfiConverterString.lift,
        errorHandler: FfiConverterTypeSwiftKcpError.lift
    )
}

public func newListener(bindAddrStr: String, params: KcpConfigParams) async throws -> UInt64 {
    return try await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_bindings_fn_func_new_listener(
                FfiConverterString.lower(bindAddrStr),
                FfiConverterTypeKcpConfigParams.lower(params)
            )
        },
        pollFunc: ffi_bindings_rust_future_poll_u64,
        completeFunc: ffi_bindings_rust_future_complete_u64,
        freeFunc: ffi_bindings_rust_future_free_u64,
        liftFunc: FfiConverterUInt64.lift,
        errorHandler: FfiConverterTypeSwiftKcpError.lift
    )
}

public func newStream(addrStr: String, params: KcpConfigParams) async throws -> UInt64 {
    return try await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_bindings_fn_func_new_stream(
                FfiConverterString.lower(addrStr),
                FfiConverterTypeKcpConfigParams.lower(params)
            )
        },
        pollFunc: ffi_bindings_rust_future_poll_u64,
        completeFunc: ffi_bindings_rust_future_complete_u64,
        freeFunc: ffi_bindings_rust_future_free_u64,
        liftFunc: FfiConverterUInt64.lift,
        errorHandler: FfiConverterTypeSwiftKcpError.lift
    )
}

public func readExactStream(id: UInt64, len: UInt32) async throws -> Data {
    return try await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_bindings_fn_func_read_exact_stream(
                FfiConverterUInt64.lower(id),
                FfiConverterUInt32.lower(len)
            )
        },
        pollFunc: ffi_bindings_rust_future_poll_rust_buffer,
        completeFunc: ffi_bindings_rust_future_complete_rust_buffer,
        freeFunc: ffi_bindings_rust_future_free_rust_buffer,
        liftFunc: FfiConverterData.lift,
        errorHandler: FfiConverterTypeSwiftKcpError.lift
    )
}

public func readStream(id: UInt64) async throws -> Data {
    return try await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_bindings_fn_func_read_stream(
                FfiConverterUInt64.lower(id)
            )
        },
        pollFunc: ffi_bindings_rust_future_poll_rust_buffer,
        completeFunc: ffi_bindings_rust_future_complete_rust_buffer,
        freeFunc: ffi_bindings_rust_future_free_rust_buffer,
        liftFunc: FfiConverterData.lift,
        errorHandler: FfiConverterTypeSwiftKcpError.lift
    )
}

public func removeListener(id: UInt64) async throws {
    return try await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_bindings_fn_func_remove_listener(
                FfiConverterUInt64.lower(id)
            )
        },
        pollFunc: ffi_bindings_rust_future_poll_void,
        completeFunc: ffi_bindings_rust_future_complete_void,
        freeFunc: ffi_bindings_rust_future_free_void,
        liftFunc: { $0 },
        errorHandler: FfiConverterTypeSwiftKcpError.lift
    )
}

public func removeStream(id: UInt64) async throws {
    return try await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_bindings_fn_func_remove_stream(
                FfiConverterUInt64.lower(id)
            )
        },
        pollFunc: ffi_bindings_rust_future_poll_void,
        completeFunc: ffi_bindings_rust_future_complete_void,
        freeFunc: ffi_bindings_rust_future_free_void,
        liftFunc: { $0 },
        errorHandler: FfiConverterTypeSwiftKcpError.lift
    )
}

public func shutdownStream(id: UInt64) async throws {
    return try await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_bindings_fn_func_shutdown_stream(
                FfiConverterUInt64.lower(id)
            )
        },
        pollFunc: ffi_bindings_rust_future_poll_void,
        completeFunc: ffi_bindings_rust_future_complete_void,
        freeFunc: ffi_bindings_rust_future_free_void,
        liftFunc: { $0 },
        errorHandler: FfiConverterTypeSwiftKcpError.lift
    )
}

public func writeStream(id: UInt64, data: Data) async throws {
    return try await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_bindings_fn_func_write_stream(
                FfiConverterUInt64.lower(id),
                FfiConverterData.lower(data)
            )
        },
        pollFunc: ffi_bindings_rust_future_poll_void,
        completeFunc: ffi_bindings_rust_future_complete_void,
        freeFunc: ffi_bindings_rust_future_free_void,
        liftFunc: { $0 },
        errorHandler: FfiConverterTypeSwiftKcpError.lift
    )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 24
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_bindings_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_bindings_checksum_func_accepet() != 31348 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_bindings_checksum_func_default_kcp_config_params() != 28217 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_bindings_checksum_func_deinit_runtime() != 44810 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_bindings_checksum_func_flush_stream() != 7613 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_bindings_checksum_func_get_stream_count() != 26440 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_bindings_checksum_func_init_runtime() != 21533 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_bindings_checksum_func_local_addr() != 25337 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_bindings_checksum_func_new_listener() != 40356 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_bindings_checksum_func_new_stream() != 58987 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_bindings_checksum_func_read_exact_stream() != 64538 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_bindings_checksum_func_read_stream() != 33813 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_bindings_checksum_func_remove_listener() != 11259 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_bindings_checksum_func_remove_stream() != 25309 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_bindings_checksum_func_shutdown_stream() != 8184 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_bindings_checksum_func_write_stream() != 28528 {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiInitContinuationCallback()
    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
